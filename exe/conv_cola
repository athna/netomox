#!/usr/bin/env ruby

require 'json'
require 'netomox'
require 'optparse'

module Netomox
  params = ARGV.getopts('f:', 'file:')
  file = params['f'] || params['file']
  unless file
    STDERR.puts 'file not specified'
    exit(1)
  end

  data = JSON.parse(File.read(file))
  nws = Topology::Networks.new(data)

  # cola network data
  cola_networks = {
    nodes: [],
    links: [],
    groups: []
  }

  # create cola-node data
  cola_node_index = 0
  cola_node_index_of = {}
  nws.all_termination_points do |tp, _node, _nw|
    cola_node = {
      name: tp.path,
      index: cola_node_index,
      width: 30,
      height: 20
    }
    cola_networks[:nodes].push cola_node
    cola_node_index_of[tp.path] = cola_node[:index]
    cola_node_index += 1
  end

  # create cola-link data by link
  nws.all_links do |link, _nw|
    cola_link = {
      source: cola_node_index_of[link.source.ref_path],
      target: cola_node_index_of[link.destination.ref_path]
    }
    cola_networks[:links].push cola_link
  end

  # create cola-link data by supporting-tp
  nws.all_termination_points do |tp, _node, _nw|
    tp.supports.each do |stp|
      cola_link = {
        source: cola_node_index_of[tp.path],
        target: cola_node_index_of[stp.ref_path]
      }
      cola_networks[:links].push cola_link
    end
  end

  # create cola groups (by each host)
  cola_group_by_node = {}
  cola_networks[:nodes].each do |cola_node|
    # cola_node means tp
    node_path = cola_node[:name].split('/').slice(0..1).join('/')
    unless cola_group_by_node[node_path]
      cola_group_by_node[node_path] = []
    end
    cola_group_by_node[node_path].push(cola_node[:index])
  end

  # construct cola group data
  cola_group_by_node.each_value do |leaves|
    group_data = {
      leaves: leaves
    }
    cola_networks[:groups].push group_data
  end

  puts JSON.pretty_generate(cola_networks)
end
